[


{
   "projectID": 8,
   "type": "software engineering",
   "projectName": "PackTheBox",
   "thumbURL": "/static/img/thumbs/packthebox_thumb.gif",
   "title": "Pack the Box",
   "summary": "A Python script that packs a container with a specified shape using randomized placement, then calculates the resulting space efficiency.",
   "date": "2016",
   "problem": "You have a container. Given a series of items of the same size and shape, what space efficiency can be achieved by randomly selecting an x,y coordinate at which to place each item inside the container?",
   "solution": "• Is space efficiency greater or smaller when items are smaller? What shapes fare better than others?",
   "description": "• Does the size of the container matter?",
   "future-features": "Test your hypotheses, and see how space-efficient your selections can be. Please clone my github repository (link below) and follow the instructions posted in the README.",
   "partners": "SOLO PROJECT",
   "techstack": "Python3, Turtle",
   "apis": "",
   "data": "",
   "github": "https://github.com/tdiede/packthebox",
   "deployed": ""
},

{
   "projectID": 0,
   "type": "software engineering",
   "projectName": "HackscrapersSF",
   "thumbURL": "/static/img/thumbs/hackscrapers_thumb.png",
   "title": "Hackscrapers SF",
   "summary": "A Python/Flask full-stack web app built over the course of 4 weeks during the intensive Hackbright software engineering fellowship.",
   "date": "2016",
   "problem": "Hackscrapers SF encourages users to get to know the skyline of their city and explore the tall buildings around them. An API call to Flickr returns building photo urls, based on a query of photo tags, and the accuracy of existing Flickr tags, given the intent of the search, is not 100%. The quality of these tags is improved as users of the Hackscrapers app crowdsource their accuracy.",
   "solution": "The app authenticates with a Flickr account and makes API calls so that users can save their favorite photos of buildings and contribute their own photos to the photos database.",
   "description": "Users interact with a Mapbox GL web map that displays markers to represent tall buildings from a PostgreSQL database. An AJAX request returns a chart with more information and a Flickr photo selected at random from metadata stored in a MongoDB database. The photo results can be further queried to allow users to contribute their own search terms and filter per their interests. Users can then assemble collectible cards to display favorite buildings on their profile.",
   "future": "Future features: Establish a training dataset to tag a good or bad photo, using machine learning to know which photos are of an actual building and of decent quality.",
   "partners": "SOLO PROJECT",
   "techstack": "Python, Flask, PostgreSQL, SQLAlchemy, MongoDB, PyMongo, Javascript, jQuery, AJAX, Jinja, Bootstrap, Chart.js, D3.js, turf.js",
   "apis": "Mapbox, Google Places, Flickr APIs",
   "data": "Data come from the Skyscraper Center, a database of tall buildings maintained and updated by the Council on Tall Buildings and Urban Habitat.",
   "github": "https://github.com/tdiede/hackscrapers_SF",
   "deployed": "https://hackscrapers.herokuapp.com"
},

{
   "projectID": 11,
   "type": "software engineering",
   "projectName": "Geocoder",
   "thumbURL": "/static/img/thumbs/geocoder_thumb.png",
   "title": "Geocoder",
   "summary": "Input a table of place names to map, and out comes a GEOJSON of latitudes and longitudes. For frequent mappers.",
   "date": "2017",
   "problem": "This is a simple geocoding tool I created to map geographic locations. Whenever I want to map point data, this is my go-to Python script.",
   "solution": "Taking a list of locations (city, state, country) saved in a comma-delimited .CSV file, for each location a request is made to the Google Places API. Once all the features have been appended to a Python list, the script then formats the point geodata (latitude and longitude) as GEOJSON and writes to a file, ready to map.",
   "description": "",
   "future": "",
   "partners": "SOLO PROJECT",
   "techstack": "Python",
   "apis": "Google Places API",
   "data": "",
   "github": "https://github.com/tdiede/google_places_geocoder",
   "deployed": ""
},

{
   "projectID": 10,
   "type": "software engineering",
   "projectName": "Color Wheel",
   "thumbURL": "/static/img/thumbs/colorwheel_thumb.png",
   "title": "Color Wheel",
   "summary": "A tool to pick a color from a photo, and convert between HEX and RGB values (made as a birthday present for a friend).",
   "date": "2017",
   "problem": "As a designer I frequently find myself wanting to identify colors from images. In this mini-app, you can use the eyedropper to pick a color from a photo, drawn on an HTML5 canvas. Based on the pixel where the eyedropper lands, both RGB and HEX values are displayed and can be adjusted by the user for comparison to the photo's color. JavaScript functions convert RGB to HEX, and vice versa.",
   "solution": "",
   "description": "",
   "future": "Next step will be to enable users to upload their own photos. Also needs data validation so users are restricted to entering actual RGB and HEX values.",
   "partners": "SOLO PROJECT",
   "techstack": "JavaScript, jQuery, HTML5 canvas",
   "apis": "",
   "data": "",
   "github": "https://github.com/tdiede/sherry30thbdaycolorwheel",
   "deployed": "http://theresediede.com/sherry30thbdaycolorwheel"
},

{
   "projectID": 3,
   "type": "architecture",
   "projectName": "ParametricRealizations",
   "thumbURL": "/static/img/thumbs/parametric_thumb.png",
   "title": "Parametric Realizations",
   "summary": "Scripted geometries in architecture, and a set of instructions employed by CNC machine to make a series of bas-relief plates.",
   "date": "2008",
   "problem": "In architecture (the design of physical buildings) the goal of parametric design is to allow the generation of options and iterations, based on known or desired constraints. The architect then serves to critique and evaluate the results through the lens of design expertise.",
   "solution": "RhinoScript is a scripting tool based on Microsoft's VBScript language, written for the 3D modeling application Rhinoceros. My partner and I automated the visualization of a variety of geometric designs. A CNC (Computer Numeric Control) machine then took the digital instructions and drilled a series of wood bas-relief plates as prototypes.",
   "description": "The script took a circle (the shape of our plates) and identified a random number of pull points along the circumference. These pull points defined arcs to cut across the plate, along with a z-depth dimension input parameter.",
   "future": "In some cases the drill path overlaps itself, so the script could be further refined to prevent impossible geometry.",
   "partners": "PARTNER: Sina Mesdaghi",
   "techstack": "RhinoScript (based on Microsoft's VBScript), Rhinoceros, Mastercam CAD",
   "apis": "",
   "data": "",
   "github": "",
   "deployed": "",
   "links": "http://www.sinamesdaghi.com"
},

{
   "projectID": 5,
   "type": "cartography",
   "projectName": "RowanCarto",
   "thumbURL": "/static/img/thumbs/map_thumb.png",
   "title": "West Point History of Warfare: Cartography",
   "summary": "Professional cartography produced for a digital interactive textbook about military history.",
   "date": "2013–2014",
   "problem": "",
   "solution": "",
   "description": "The award-winning <i>West Point History of Warfare</i> offers an innovative interactive learning experience on the topic of military history. As lead cartographer I developed a process to generate 500+ maps in less than 9 months for a product used concurrently by West Point cadets. From Plato to NATO the maps and other graphic content, including data visualizations and 3D terrain fly-throughs, bring battles to life and situate conflicts in their larger political context.",
   "future": "",
   "partners": "ROWAN TECH professional experience",
   "techstack": "ArcMap, Illustrator, Photoshop, After Effects, iBooks Author, Rhinoceros, 3dsMax, GDAL, JavaScript",
   "apis": "",
   "data": "A multitude of open data, and specialized content developed by historians at West Point.",
   "github": "",
   "deployed": "",
   "links": "http://www.westpointhistoryofwarfare.com/more"
},

{
   "projectID": 7,
   "type": "architecture",
   "projectName": "PudelmaPavilion",
   "thumbURL": "/static/img/thumbs/pavilion_thumb.png",
   "title": "Pudelma Pavilion",
   "summary": "A built pavilion where each component beam is uniquely cut according to the overall design and structural requirements.",
   "date": "2011",
   "problem": "Pudelma is a pavilion in Turku, Finland. Now a landmark, the pavilion's design combined inspiration from traditional Finnish wood-working techniques and innovation made possible by computer-aided manufacturing methods. The structure stands via a basic mortise and tenon joint, where each beam either receives of abuts to four other beams creating a highly stable weave pattern. A factory-scale CNC machine cut 490 distinct Kerto-Q wood beams, ranging in length from 2-6 feet. The use of CNC fabrication resulted in extremely high tolerance, allowing the entire structure to work in compression with no glue, and minimal screws.",
   "solution": "I participated in a 4-week workshop with 20 students as a Finnish exchange: 2 weeks in New York to design the pavilion and 2 weeks in Finland to cut the wood and assemble the final structure, which still stands in the city of Turku today.",
   "description": "",
   "future": "",
   "partners": "TEAM: a collaborative effort between students from University of Oulu and Columbia University",
   "techstack": "Rhinoceros, Grasshopper, rubber mallets and hard hats",
   "apis": "",
   "data": "",
   "github": "",
   "deployed": "",
   "links": "http://www.archdaily.com/265933/venice-biennale-2012-finnish-pavilion-presents-new-forms-in-wood/eero-lunden-markus-wikar-pudelma-in-turku-finland-04-photo-by-taavi-henttonen"
}





]
